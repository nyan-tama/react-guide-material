{"ast":null,"code":"var _jsxFileName = \"/Users/lidar9k/js/react-guide-material/11_hooks_p1/src/080_practice_reminder/start/context/TodoContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useContext, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoContext = /*#__PURE__*/createContext();\nconst TodoDispatchContext = /*#__PURE__*/createContext();\nconst todosList = [{\n  id: 1,\n  content: \"店予約する\",\n  editing: false\n}, {\n  id: 2,\n  content: \"卵買う\",\n  editing: false\n}, {\n  id: 3,\n  content: \"郵便出す\",\n  editing: false\n}];\nconst todoReducer = (todos, action) => {\n  switch (action.type) {\n    case 'todo/add':\n      return [...todos, action.todo];\n    case 'todo/delete':\n    case 'todo/update':\n    default:\n      return todos;\n  }\n  const deleteTodo = id => {\n    const newTodos = todos.filter(todo => {\n      return todo.id !== id;\n    });\n    setTodos(newTodos);\n  };\n  const createTodo = todo => {\n    setTodos([...todos, todo]);\n  };\n  const updateTodo = changeTodo => {\n    const newTodos = todos.map(todo => {\n      // todo.editing = changeTodo.editingのように直接書き換えるとtodosの値が変わってしまうので、\n      // スプレッド構文で新しいオブジェクトを作成して、その中chageTodoの値を上書きする\n      return todo.id === changeTodo.id ? {\n        ...todo,\n        ...changeTodo\n      } : {\n        ...todo\n      };\n    });\n    setTodos(newTodos);\n  };\n};\nconst TodoProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [todos, dispatch] = useReducer(todoReducer, todosList);\n  return /*#__PURE__*/_jsxDEV(TodoContext.Provider, {\n    value: todos,\n    children: /*#__PURE__*/_jsxDEV(TodoDispatchContext.Provider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n_s(TodoProvider, \"umbuCdzD0VoHQAllnvdLnYuE1FQ=\");\n_c = TodoProvider;\nconst useTodos = useContext(TodoContext);\nconst useDispatchTodos = useContext(TodoDispatchContext);\nexport { useTodos, useDispatchTodos };\nvar _c;\n$RefreshReg$(_c, \"TodoProvider\");","map":{"version":3,"names":["createContext","useContext","useReducer","jsxDEV","_jsxDEV","TodoContext","TodoDispatchContext","todosList","id","content","editing","todoReducer","todos","action","type","todo","deleteTodo","newTodos","filter","setTodos","createTodo","updateTodo","changeTodo","map","TodoProvider","_ref","_s","children","dispatch","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTodos","useDispatchTodos","$RefreshReg$"],"sources":["/Users/lidar9k/js/react-guide-material/11_hooks_p1/src/080_practice_reminder/start/context/TodoContext.js"],"sourcesContent":["import { createContext, useContext, useReducer } from \"react\"\n\nconst TodoContext = createContext()\nconst TodoDispatchContext = createContext()\n\nconst todosList = [\n    {\n        id: 1,\n        content: \"店予約する\",\n        editing: false,\n    },\n    {\n        id: 2,\n        content: \"卵買う\",\n        editing: false,\n    },\n    {\n        id: 3,\n        content: \"郵便出す\",\n        editing: false,\n    },\n];\n\nconst todoReducer = (todos, action) => {\n    switch (action.type) {\n        case 'todo/add':\n            return [...todos, action.todo]\n        case 'todo/delete':\n        case 'todo/update':\n        default: return todos\n    }\n\n    const deleteTodo = (id) => {\n        const newTodos = todos.filter((todo) => {\n            return todo.id !== id;\n        });\n\n        setTodos(newTodos);\n    }\n\n    const createTodo = (todo) => {\n        setTodos([...todos, todo]);\n    }\n\n    const updateTodo = (changeTodo) => {\n        const newTodos = todos.map(todo => {\n            // todo.editing = changeTodo.editingのように直接書き換えるとtodosの値が変わってしまうので、\n            // スプレッド構文で新しいオブジェクトを作成して、その中chageTodoの値を上書きする\n            return todo.id === changeTodo.id ? { ...todo, ...changeTodo } : { ...todo }\n        })\n        setTodos(newTodos);\n    }\n}\n\nconst TodoProvider = ({ children }) => {\n\n    const [todos, dispatch] = useReducer(todoReducer, todosList);\n\n    return (\n        <TodoContext.Provider value={todos}>\n            <TodoDispatchContext.Provider value={dispatch}>\n                {children}\n            </TodoDispatchContext.Provider>\n        </TodoContext.Provider>\n    )\n}\n\nconst useTodos = useContext(TodoContext);\nconst useDispatchTodos = useContext(TodoDispatchContext);\n\n\nexport { useTodos, useDispatchTodos }"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,UAAU,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7D,MAAMC,WAAW,gBAAGL,aAAa,EAAE;AACnC,MAAMM,mBAAmB,gBAAGN,aAAa,EAAE;AAE3C,MAAMO,SAAS,GAAG,CACd;EACIC,EAAE,EAAE,CAAC;EACLC,OAAO,EAAE,OAAO;EAChBC,OAAO,EAAE;AACb,CAAC,EACD;EACIF,EAAE,EAAE,CAAC;EACLC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;AACb,CAAC,EACD;EACIF,EAAE,EAAE,CAAC;EACLC,OAAO,EAAE,MAAM;EACfC,OAAO,EAAE;AACb,CAAC,CACJ;AAED,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACnC,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,UAAU;MACX,OAAO,CAAC,GAAGF,KAAK,EAAEC,MAAM,CAACE,IAAI,CAAC;IAClC,KAAK,aAAa;IAClB,KAAK,aAAa;IAClB;MAAS,OAAOH,KAAK;EAAA;EAGzB,MAAMI,UAAU,GAAIR,EAAE,IAAK;IACvB,MAAMS,QAAQ,GAAGL,KAAK,CAACM,MAAM,CAAEH,IAAI,IAAK;MACpC,OAAOA,IAAI,CAACP,EAAE,KAAKA,EAAE;IACzB,CAAC,CAAC;IAEFW,QAAQ,CAACF,QAAQ,CAAC;EACtB,CAAC;EAED,MAAMG,UAAU,GAAIL,IAAI,IAAK;IACzBI,QAAQ,CAAC,CAAC,GAAGP,KAAK,EAAEG,IAAI,CAAC,CAAC;EAC9B,CAAC;EAED,MAAMM,UAAU,GAAIC,UAAU,IAAK;IAC/B,MAAML,QAAQ,GAAGL,KAAK,CAACW,GAAG,CAACR,IAAI,IAAI;MAC/B;MACA;MACA,OAAOA,IAAI,CAACP,EAAE,KAAKc,UAAU,CAACd,EAAE,GAAG;QAAE,GAAGO,IAAI;QAAE,GAAGO;MAAW,CAAC,GAAG;QAAE,GAAGP;MAAK,CAAC;IAC/E,CAAC,CAAC;IACFI,QAAQ,CAACF,QAAQ,CAAC;EACtB,CAAC;AACL,CAAC;AAED,MAAMO,YAAY,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAE9B,MAAM,CAACb,KAAK,EAAEgB,QAAQ,CAAC,GAAG1B,UAAU,CAACS,WAAW,EAAEJ,SAAS,CAAC;EAE5D,oBACIH,OAAA,CAACC,WAAW,CAACwB,QAAQ;IAACC,KAAK,EAAElB,KAAM;IAAAe,QAAA,eAC/BvB,OAAA,CAACE,mBAAmB,CAACuB,QAAQ;MAACC,KAAK,EAAEF,QAAS;MAAAD,QAAA,EACzCA;IAAQ;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACkB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACZ;AAE/B,CAAC;AAAAR,EAAA,CAXKF,YAAY;AAAAW,EAAA,GAAZX,YAAY;AAalB,MAAMY,QAAQ,GAAGnC,UAAU,CAACI,WAAW,CAAC;AACxC,MAAMgC,gBAAgB,GAAGpC,UAAU,CAACK,mBAAmB,CAAC;AAGxD,SAAS8B,QAAQ,EAAEC,gBAAgB;AAAE,IAAAF,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}